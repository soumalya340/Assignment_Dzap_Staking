/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockERC721, MockERC721Interface } from "../MockERC721";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721IncorrectOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721InsufficientApproval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC721InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ERC721InvalidOperator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC721InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721NonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b81525081600090816200005f91906200011c565b5060016200006e82826200011c565b505050620001e8565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a257607f821691505b602082108103620000c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011757600081815260208120601f850160051c81016020861015620000f25750805b601f850160051c820191505b818110156200011357828155600101620000fe565b5050505b505050565b81516001600160401b0381111562000138576200013862000077565b62000150816200014984546200008d565b84620000c9565b602080601f8311600181146200018857600084156200016f5750858301515b600019600386901b1c1916600185901b17855562000113565b600085815260208120601f198616915b82811015620001b95788860151825594840194600190910190840162000198565b5085821015620001d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610fea80620001f86000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636a6278421161008c578063a22cb46511610066578063a22cb465146101e1578063b88d4fde146101f4578063c87b56dd14610207578063e985e9c51461021a57600080fd5b80636a627842146101a557806370a08231146101b857806395d89b41146101d957600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806323b872dd1461016c57806342842e0e1461017f5780636352211e1461019257600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610c33565b61022d565b60405190151581526020015b60405180910390f35b61011f61027f565b60405161010e9190610ca0565b61013f61013a366004610cb3565b610311565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610ce8565b61033a565b005b61016a61017a366004610d12565b610349565b61016a61018d366004610d12565b6103d9565b61013f6101a0366004610cb3565b6103f9565b61016a6101b3366004610d4e565b610404565b6101cb6101c6366004610d4e565b610426565b60405190815260200161010e565b61011f61046e565b61016a6101ef366004610d69565b61047d565b61016a610202366004610dbb565b610488565b61011f610215366004610cb3565b61049f565b610102610228366004610e97565b610514565b60006001600160e01b031982166380ac58cd60e01b148061025e57506001600160e01b03198216635b5e139f60e01b145b8061027957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461028e90610eca565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba90610eca565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b5050505050905090565b600061031c82610542565b506000828152600460205260409020546001600160a01b0316610279565b61034582823361057b565b5050565b6001600160a01b03821661037857604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610385838333610588565b9050836001600160a01b0316816001600160a01b0316146103d3576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161036f565b50505050565b6103f483838360405180602001604052806000815250610488565b505050565b600061027982610542565b6006805490600061041483610f04565b90915550506006546103458282610681565b60006001600160a01b038216610452576040516322718ad960e21b81526000600482015260240161036f565b506001600160a01b031660009081526003602052604090205490565b60606001805461028e90610eca565b61034533838361069b565b610493848484610349565b6103d38484848461073a565b60606104aa82610542565b5060006104c260408051602081019091526000815290565b905060008151116104e2576040518060200160405280600081525061050d565b806104ec84610863565b6040516020016104fd929190610f2b565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260408120546001600160a01b03168061027957604051637e27328960e01b81526004810184905260240161036f565b6103f483838360016108f6565b6000828152600260205260408120546001600160a01b03908116908316156105b5576105b58184866109fc565b6001600160a01b038116156105f3576105d26000856000806108f6565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615610622576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b610345828260405180602001604052806000815250610a60565b6001600160a01b0382166106cd57604051630b61174360e31b81526001600160a01b038316600482015260240161036f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156103d357604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061077c903390889087908790600401610f5a565b6020604051808303816000875af19250505080156107b7575060408051601f3d908101601f191682019092526107b491810190610f97565b60015b610820573d8080156107e5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ea565b606091505b50805160000361081857604051633250574960e11b81526001600160a01b038516600482015260240161036f565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461085c57604051633250574960e11b81526001600160a01b038516600482015260240161036f565b5050505050565b6060600061087083610a77565b600101905060008167ffffffffffffffff81111561089057610890610da5565b6040519080825280601f01601f1916602001820160405280156108ba576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846108c457509392505050565b808061090a57506001600160a01b03821615155b156109cc57600061091a84610542565b90506001600160a01b038316158015906109465750826001600160a01b0316816001600160a01b031614155b801561095957506109578184610514565b155b156109825760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161036f565b81156109ca5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610a07838383610b4f565b6103f4576001600160a01b038316610a3557604051637e27328960e01b81526004810182905260240161036f565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161036f565b610a6a8383610bb5565b6103f4600084848461073a565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ab65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610ae2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610b0057662386f26fc10000830492506010015b6305f5e1008310610b18576305f5e100830492506008015b6127108310610b2c57612710830492506004015b60648310610b3e576064830492506002015b600a83106102795760010192915050565b60006001600160a01b03831615801590610bad5750826001600160a01b0316846001600160a01b03161480610b895750610b898484610514565b80610bad57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b038216610bdf57604051633250574960e11b81526000600482015260240161036f565b6000610bed83836000610588565b90506001600160a01b038116156103f4576040516339e3563760e11b81526000600482015260240161036f565b6001600160e01b031981168114610c3057600080fd5b50565b600060208284031215610c4557600080fd5b813561050d81610c1a565b60005b83811015610c6b578181015183820152602001610c53565b50506000910152565b60008151808452610c8c816020860160208601610c50565b601f01601f19169290920160200192915050565b60208152600061050d6020830184610c74565b600060208284031215610cc557600080fd5b5035919050565b80356001600160a01b0381168114610ce357600080fd5b919050565b60008060408385031215610cfb57600080fd5b610d0483610ccc565b946020939093013593505050565b600080600060608486031215610d2757600080fd5b610d3084610ccc565b9250610d3e60208501610ccc565b9150604084013590509250925092565b600060208284031215610d6057600080fd5b61050d82610ccc565b60008060408385031215610d7c57600080fd5b610d8583610ccc565b915060208301358015158114610d9a57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610dd157600080fd5b610dda85610ccc565b9350610de860208601610ccc565b925060408501359150606085013567ffffffffffffffff80821115610e0c57600080fd5b818701915087601f830112610e2057600080fd5b813581811115610e3257610e32610da5565b604051601f8201601f19908116603f01168101908382118183101715610e5a57610e5a610da5565b816040528281528a6020848701011115610e7357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610eaa57600080fd5b610eb383610ccc565b9150610ec160208401610ccc565b90509250929050565b600181811c90821680610ede57607f821691505b602082108103610efe57634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201610f2457634e487b7160e01b600052601160045260246000fd5b5060010190565b60008351610f3d818460208801610c50565b835190830190610f51818360208801610c50565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610f8d90830184610c74565b9695505050505050565b600060208284031215610fa957600080fd5b815161050d81610c1a56fea264697066735822122012aef51b038a41345ee35a3fca727a3820b99846369bcf4202e92d336fe9fd2364736f6c63430008140033";

type MockERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC721__factory extends ContractFactory {
  constructor(...args: MockERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockERC721";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockERC721> {
    return super.deploy(overrides || {}) as Promise<MockERC721>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockERC721 {
    return super.attach(address) as MockERC721;
  }
  connect(signer: Signer): MockERC721__factory {
    return super.connect(signer) as MockERC721__factory;
  }
  static readonly contractName: "MockERC721";
  public readonly contractName: "MockERC721";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721Interface {
    return new utils.Interface(_abi) as MockERC721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC721 {
    return new Contract(address, _abi, signerOrProvider) as MockERC721;
  }
}
